---
import fs from 'node:fs/promises';
import path from 'path';
import prettier from 'prettier';
import { Code } from 'astro:components';
import { twMerge } from 'tailwind-merge';

const { url, src = null, isPreviewOnly, className = null } = Astro.props;

const outputCode = await Astro.slots.render('default');

const getFormattedCode = async (content, parser) => {
  try {
    const formattedCode = await prettier.format(content, {
      parser: parser,
    });
    return formattedCode;
  } catch (error) {
    console.error('Error formatting code:', error);
    throw error; // Re-throw the error for the caller to handle
  }
};
---

<div
  x-data="RinseUI"
  class="rinse-ui overflow-hidden rounded-lg border border-slate-200 bg-slate-50 dark:border-zinc-800 dark:bg-black/20"
  data-rinse-ui
>
  {
    isPreviewOnly != true && (
      <header class="flex items-center justify-between border-b border-slate-200 pl-4 dark:border-slate-100/10">
        <div class="flex items-center gap-4">
          <button
            class="h-10 text-xs font-semibold text-gray-900 dark:text-white"
            x-on:click="tab = 'preview'"
          >
            Preview
          </button>
          <button
            class="h-10 text-xs font-semibold text-gray-400 hover:text-gray-600 dark:hover:text-gray-200"
            x-on:click="tab = 'code'"
          >
            Code
          </button>

          <button
            class="h-10 text-xs font-semibold text-gray-400 hover:text-gray-600 dark:hover:text-gray-200"
            x-on:click="tab = 'output'"
          >
            Output
          </button>
        </div>
      </header>
    )
  }

  <div class="rounded-b-lg" x-ref="tabContent">
    <div x-show="tab == 'preview'" class="relative flex">
      <div class="flex-1">
        <iframe
          x-ref="iframe"
          src={url}
          class={twMerge('w-full', className)}
          x-bind:style="'height:' + iframeHeight + 'px;'"></iframe>
      </div>
      <div
        class="flex w-5 flex-none bg-slate-200 dark:bg-white/10"
        x-bind:style="'width: ' + width + 'px;'"
      >
        <div
          class="relative z-10 flex w-[20px] flex-none cursor-grab items-center justify-center bg-slate-50 shadow-[-1px_0_0_0_rgba(0,0,0,0.1)] dark:bg-zinc-900 dark:shadow-[-1px_0_0_0_rgba(255,255,255,0.1)]"
          @mousedown="slideReady"
          @touchstart="slideReady"
          x-ref="resizeHandle"
        >
          <div
            class="after:contents-[''] before:content-['']-[''] flex
					w-[4] gap-0.5 before:block before:h-3.5 before:w-px
					before:bg-gray-500 after:block after:h-3.5 after:w-px after:bg-gray-500"
          >
          </div>
        </div>
      </div>
    </div>

    <div
      x-show="tab == 'code'"
      x-cloak
      class="max-h-[500px] overflow-auto text-sm"
      x-ref="codeContainer"
      data-tab-name="code"
    >
    </div>

    <div
      x-show="tab == 'output'"
      x-cloak
      class="max-h-[500px] overflow-auto text-sm"
      x-ref="outputContainer"
      data-tab-name="output"
    >
    </div>
  </div>
</div>

<script>
  import Alpine from 'alpinejs';
  document.addEventListener('alpine:init', () => {
    Alpine.data('RinseUI', () => ({
      tab: 'preview',
      iframeHeight: 100,
      showTooltip: false,
      cursorOffset: 0,
      width: null,

      init() {
        const tabContent = this.$refs.tabContent;
        const iframe = tabContent.querySelector('iframe');

        iframe.onload = () => {
          try {
            const iframeDocument =
              iframe.contentDocument || iframe.contentWindow.document;
            const body = iframeDocument.body;

            const resizeObserver = new ResizeObserver((entries) => {
              for (let entry of entries) {
                this.iframeHeight = entry.target.scrollHeight;
              }
            });

            resizeObserver.observe(body);

            // # Code Element
            // Use querySelector on the iframe's document
            let codeElement = iframeDocument.querySelector('pre.astro-code');

            // Select or create the div on the parent page where you want to insert the content
            let codeContainer = this.$refs.codeContainer;

            // Insert the content into the div
            codeContainer.innerHTML = codeElement.outerHTML;

            // # Output Element
            // Use querySelector to find the target element inside the iframe
            let componentElement = iframeDocument.querySelector('#output');

            let outputContainer = this.$refs.outputContainer;

            // Insert the content into the div
            outputContainer.innerHTML = componentElement.innerHTML;
          } catch (error) {
            console.error('Error accessing iframe content:', error);
          }
        };

        // document.addEventListener('resize', this.resetContainer.bind(this));
      },
      slideReady(e) {
        e.preventDefault();
        this.slideMoveHandler = this.slideMove.bind(this); // Save a reference to the bound slideMove function
        this.cursorOffset =
          e.clientX - this.$refs.resizeHandle.getBoundingClientRect().x;
        document.body.style.pointerEvents = 'none';
        document.documentElement.style.cursor = 'grabbing';

        document.addEventListener('mousemove', this.slideMoveHandler);
        document.addEventListener('mouseup', this.slideFinish.bind(this));

        document.addEventListener('touchmove', this.slideMoveHandler);
        document.addEventListener('touchend', this.slideFinish.bind(this));
      },
      slideFinish() {
        document.body.style.pointerEvents = 'auto';
        document.documentElement.style.cursor = 'default';
        document.removeEventListener('mousemove', this.slideMoveHandler);
        document.removeEventListener('touchmove', this.slideMoveHandler);
      },
      slideMove(e) {
        let containerWidth = this.$refs.tabContent.offsetWidth;

        let slideWidth =
          this.$refs.tabContent.getBoundingClientRect().right - e.clientX;

        if (e.touches && e.touches[0]) {
          slideWidth =
            this.$refs.tabContent.getBoundingClientRect().right -
            e.touches[0].clientX;
        } else if (e.clientX) {
          slideWidth =
            this.$refs.tabContent.getBoundingClientRect().right - e.clientX;
        }

        if (slideWidth >= containerWidth - this.cursorOffset) {
          this.width = containerWidth;
        } else if (slideWidth <= 20 - this.cursorOffset) {
          this.width = 20;
        } else {
          this.width = slideWidth + this.cursorOffset;
        }
      },
      copyCode() {
        // Use the Clipboard API to copy the current Code to the clipboard
        const activeSlot = this.$refs.tabContent.querySelector(
          `[data-tab-name="${this.tab}"] pre`,
        );

        const codeContent = activeSlot ? activeSlot.innerText : '';
        navigator.clipboard
          .writeText(codeContent)
          .then(() => {
            // Successfully copied to clipboard
            this.showTooltip = true; // Show the tooltip

            // Hide the tooltip after 2 seconds
            setTimeout(() => {
              this.showTooltip = false;
            }, 2000);
          })
          .catch((err) => {
            // Handle errors (such as user not granting clipboard permissions)
            console.error('Failed to copy: ', err);
          });
      },
      hideTooltip() {
        this.showTooltip = false; // Hide the tooltip
      },
    }));
  });
</script>
