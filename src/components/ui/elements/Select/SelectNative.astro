---
import { twMerge } from 'tailwind-merge';

const { data, className, validation, size, ...props } = Astro.props;

const defaultData = {
  validation: validation,
  size: size,
};

const xData = JSON.stringify({ ...defaultData, ...data }, null, 2).replace(/"/g, `'`);
---

<select
  x-data={`SelectNative(${xData})`}
  class={twMerge(
    'relative flex w-full h-9 py-0 items-center rounded-md border-0 gap-3 bg-white pl-3 pr-6 text-[13px] text-gray-900 shadow-sm ring-1 ring-inset ring-zinc-950/10 placeholder:text-gray-400 hover:ring-zinc-950/20 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-blue-500 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500 disabled:ring-gray-200 dark:bg-zinc-100/[0.06] dark:text-gray-200 dark:ring-zinc-50/10 dark:hover:ring-zinc-50/20 dark:focus-visible:ring-blue-500 dark:disabled:bg-zinc-100/[0.06] dark:disabled:text-gray-400',
    className,
  )}
  x-bind:class="{ 
    [getClass('validation.default')]: validation == 'default',
    [getClass('validation.success')]: validation == 'success' ,
    [getClass('validation.error')]: validation == 'error', 
    [getClass('size.xs')]: size == 'xs',
    [getClass('size.sm')]: size == 'sm',
    [getClass('size.md')]: size == 'md',
    [getClass('size.lg')]: size == 'lg',
    [getClass('size.xl')]: size == 'xl' 
  }"
  {...props}
>
  <slot />
</select>

<script>
  import Alpine from 'alpinejs';
  import { twMerge } from 'tailwind-merge';

  document.addEventListener('alpine:init', () => {
    Alpine.data('SelectNative', (initialState = {}) => ({
      validation: initialState.validation || 'default',
      size: initialState.size || 'md',
      className: {
        validation: {
          default:
            'bg-white text-gray-900 ring-1 ring-inset ring-zinc-950/10 placeholder:text-gray-400 hover:ring-zinc-950/20 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-blue-500 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500 disabled:ring-gray-200 dark:bg-zinc-100/[0.06] dark:text-gray-200 dark:ring-zinc-50/10 dark:hover:ring-zinc-50/20 dark:focus-visible:ring-blue-500 dark:disabled:bg-zinc-100/[0.06] dark:disabled:text-gray-400',
          success:
            'ring-2 ring-green-500 dark:ring-green-500 text-green-800 dark:text-green-200 placeholder:text-green-500',
          error:
            'ring-2 ring-red-500 dark:ring-red-500 text-red-800 dark:text-red-200 placeholder:text-red-500',
        },
        size: {
          xs: 'text-[12px] h-7 px-3 gap-3',
          sm: 'text-[13px] h-8 px-3 gap-3',
          md: 'text-[14px] h-9 px-3 gap-3',
          lg: 'text-[15px] h-10 px-3 gap-3',
          xl: 'text-[16px] h-11 px-4 gap-3',
        },
      },
      init() {
        this.setState(initialState);
      },
      setState(state) {
        for (const path in state) {
          const pathParts = path.split('.');
          let currentPart = this;

          for (let i = 0; i < pathParts.length - 1; i++) {
            if (currentPart[pathParts[i]] === undefined) {
              console.warn(`State path "${pathParts[i]}" not found.`);
              return;
            }
            currentPart = currentPart[pathParts[i]];
          }

          const lastPart = pathParts[pathParts.length - 1];
          if (currentPart[lastPart] === undefined) {
            console.warn(`State path "${lastPart}" not found.`);
          } else {
            // Check if we are modifying a property inside className
            if (path.startsWith('className.')) {
              // Use twMerge for className properties
              currentPart[lastPart] = twMerge(currentPart[lastPart], state[path]);
            } else {
              // Directly assign the value for other properties
              currentPart[lastPart] = state[path];
            }
          }
        }
      },
      getClass(path) {
        const pathParts = path.split('.');
        let currentPart = this.className;

        for (const part of pathParts) {
          if (currentPart[part] === undefined) {
            console.warn(`Class path "${path}" not found.`);
            return '';
          }
          currentPart = currentPart[part];
        }
        return currentPart;
      },
    }));
  });
</script>
