---
const {
  xData = null,
  xType = null,
  placeholder = 'Search field',
  value = '',
  type = 'text',
  validation = 'default',
  isFluid = false,
  disabled = false,
  paddingClass = null,
} = Astro.props;

const getRingClass = (validation) => {
  const schema = {
    default: `ring-1 ring-zinc-950/10 hover:ring-zinc-950/20 dark:ring-zinc-50/10 dark:hover:ring-zinc-50/20`,
    success: `ring-2 ring-green-500 dark:ring-green-500`,
    error: `ring-2 ring-red-400 dark:ring-red-400`,
  };

  return schema[validation] ? `${schema[validation]}` : `${schema['default']}`;
};

const getTextClass = (validation) => {
  const schema = {
    default: `text-gray-900 dark:text-gray-200 placeholder:text-gray-400`,
    success: `text-green-800 dark:text-green-200 placeholder:text-green-500`,
    error: `text-red-900 dark:text-red-200 placeholder:text-red-300`,
  };

  return schema[validation] ? `${schema[validation]}` : `${schema['default']}`;
};
---

<div class="relative" x-data={xData ? xData : null}>
  <input
    type={type ? type : 'text'}
    class={`flex h-9 items-center ring-inset rounded-md border-0 text-[13px] shadow-sm dark:ring-zinc-700 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500 dark:disabled:text-gray-400 disabled:ring-gray-200 dark:disabled:bg-zinc-100/[0.06] bg-white dark:bg-zinc-100/[0.06] focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-blue-500 dark:focus-visible:ring-blue-500 
    ${getRingClass(validation)} 
		${getTextClass(validation)} 
    ${paddingClass ? paddingClass : null}
    ${isFluid ? 'w-full' : 'w-[320px]'}`}
    placeholder={placeholder ? placeholder : null}
    value={value ? value : null}
    disabled={disabled ? disabled : null}
    x-bind:type={xType ? xType : null}
  />
  <slot name="text-field-content" />
</div>
