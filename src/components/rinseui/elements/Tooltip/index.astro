---
const {
  className = null,
  widthClass = null,
  position = 'top',
  attract = false,
  enterClass = null,
  enterStartClass = null,
  enterEndClass = null,
  leaveClass = null,
  leaveStartClass = null,
  leaveEndClass = null,
} = Astro.props;

const getClass = (position, property) => {
  const schema = {
    top: {
      enter: `transition ease-out duration-200`,
      enterStart: `opacity-0 ${attract ? '-translate-y-2' : 'translate-y-2'}`,
      enterEnd: `opacity-100 translate-y-0`,
      leave: `transition ease-in duration-200`,
      leaveStart: `opacity-100 translate-y-0`,
      leaveEnd: `opacity-0 ${attract ? '-translate-y-2' : 'translate-y-2'}`,
    },
    right: {
      enter: `transition ease-out duration-200`,
      enterStart: `opacity-0 ${attract ? 'translate-x-2' : '-translate-x-2'}`,
      enterEnd: `opacity-100 translate-x-0`,
      leave: `transition ease-in duration-200`,
      leaveStart: `opacity-100 translate-x-0`,
      leaveEnd: `opacity-0 ${attract ? 'translate-x-2' : '-translate-x-2'}`,
    },
    bottom: {
      enter: `transition ease-out duration-200`,
      enterStart: `opacity-0 ${attract ? 'translate-y-2' : '-translate-y-2'}`,
      enterEnd: `opacity-100 translate-y-0`,
      leave: `transition ease-in duration-200`,
      leaveStart: `opacity-100 translate-y-0`,
      leaveEnd: `opacity-0 ${attract ? 'translate-y-2' : '-translate-y-2'}`,
    },
    left: {
      enter: `transition ease-out duration-200`,
      enterStart: `opacity-0 ${attract ? '-translate-x-2' : 'translate-x-2'}`,
      enterEnd: `opacity-100 translate-x-0`,
      leave: `transition ease-in duration-200`,
      leaveStart: `opacity-100 translate-x-0`,
      leaveEnd: `opacity-0 ${attract ? '-translate-x-2' : 'translate-x-2'}`,
    },
  };

  return schema[position][property];
};
---

<div class={`inline-flex ${className ? className : null}`} x-data="Tooltip">
  <div x-ref="tooltipBtn" x-on:mouseover="showTooltip" x-on:mouseleave="hideTooltip">
    <slot name="tooltip-trigger" />
  </div>
  <div
    x-cloak
    x-show="tooltipVisible"
    x-anchor.top.offset.8={position === 'top' ? '$refs.tooltipBtn' : null}
    x-anchor.right.offset.8={position === 'right' ? '$refs.tooltipBtn' : null}
    x-anchor.bottom.offset.8={position === 'bottom' ? '$refs.tooltipBtn' : null}
    x-anchor.left.offset.8={position === 'left' ? '$refs.tooltipBtn' : null}
    x-transition:enter={`${getClass(position, 'enter')} ${enterClass} `}
    x-transition:enter-start={`${getClass(position, 'enterStart')} ${enterStartClass}`}
    x-transition:enter-end={`${getClass(position, 'enterEnd')} ${enterEndClass}`}
    x-transition:leave={`${getClass(position, 'leave')} ${leaveClass} `}
    x-transition:leave-start={`${getClass(position, 'leaveStart')} ${leaveStartClass} `}
    x-transition:leave-end={`${getClass(position, 'leaveEnd')} ${leaveEndClass} `}
  >
    <div
      class={`${
        widthClass ? widthClass : 'whitespace-nowrap'
      } whitespace-normal text-left pointer-events-none z-10 rounded-md bg-zinc-800 px-2.5 py-1 text-[11px] font-medium text-gray-300 dark:ring-zinc-700 dark:bg-zinc-800`}
    >
      <slot name="tooltip-content" />
    </div>
  </div>
</div>

<script>
  import Alpine from 'alpinejs';
  import anchor from '@alpinejs/anchor';

  Alpine.plugin(anchor);

  Alpine.data('Tooltip', () => ({
    tooltipVisible: false,
    init() {
      console.log('tooltip loaded');
    },
    showTooltip() {
      this.tooltipVisible = true; // Show the tooltip
    },
    hideTooltip() {
      this.tooltipVisible = false; // Hide the tooltip
    },
  }));
</script>
