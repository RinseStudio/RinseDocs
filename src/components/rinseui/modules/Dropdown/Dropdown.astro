---
const {
  isOpen = false,
  className = null,
  widthClass = null,
  position = 'bottomStart',
  enterClass = null,
  enterStartClass = null,
  enterEndClass = null,
  leaveClass = null,
  leaveStartClass = null,
  leaveEndClass = null,
} = Astro.props;

const getClass = (position, property) => {
  const schema = {
    topStart: {
      enter: `transition ease-out duration-200`,
      enterStart: `opacity-0 translate-y-2`,
      enterEnd: `opacity-100 -translate-y-0`,
      leave: `transition ease-in duration-200`,
      leaveStart: `opacity-100 -translate-y-0`,
      leaveEnd: `opacity-0 translate-y-2`,
    },
    topEnd: {
      enter: `transition ease-out duration-200`,
      enterStart: `opacity-0 translate-y-2`,
      enterEnd: `opacity-100 -translate-y-0`,
      leave: `transition ease-in duration-200`,
      leaveStart: `opacity-100 -translate-y-0`,
      leaveEnd: `opacity-0 translate-y-2`,
    },
    bottomStart: {
      enter: `transition ease-out duration-200`,
      enterStart: `opacity-0 -translate-y-2`,
      enterEnd: `opacity-100 translate-y-0`,
      leave: `transition ease-in duration-200`,
      leaveStart: `opacity-100 translate-y-0`,
      leaveEnd: `opacity-0 -translate-y-2`,
    },
    bottomEnd: {
      enter: `transition ease-out duration-200`,
      enterStart: `opacity-0 -translate-y-2`,
      enterEnd: `opacity-100 translate-y-0`,
      leave: `transition ease-in duration-200`,
      leaveStart: `opacity-100 translate-y-0`,
      leaveEnd: `opacity-0 -translate-y-2`,
    },
  };

  return schema[position][property];
};
---

<div class={`${className ? className : ''}`} x-data={`{isOpen: ${isOpen == true ? 'true}' : 'false}'}`}>
  <div x-on:click="isOpen = !isOpen" x-ref="dropdownBtn">
    <slot name="dropdown-trigger" />
  </div>

  <div
    x-cloak
    x-show="isOpen"
    x-on:click.away="isOpen = false"
    x-anchor.top-start.offset.8={position === 'topStart' ? '$refs.dropdownBtn' : null}
    x-anchor.top-end.offset.8={position === 'topEnd' ? '$refs.dropdownBtn' : null}
    x-anchor.bottom-start.offset.8={position === 'bottomStart' ? '$refs.dropdownBtn' : null}
    x-anchor.bottom-end.offset.8={position === 'bottomEnd' ? '$refs.dropdownBtn' : null}
    x-transition:enter={`${getClass(position, 'enter')} ${enterClass} `}
    x-transition:enter-start={`${getClass(position, 'enterStart')} ${enterStartClass}`}
    x-transition:enter-end={`${getClass(position, 'enterEnd')} ${enterEndClass}`}
    x-transition:leave={`${getClass(position, 'leave')} ${leaveClass} `}
    x-transition:leave-start={`${getClass(position, 'leaveStart')} ${leaveStartClass} `}
    x-transition:leave-end={`${getClass(position, 'leaveEnd')} ${leaveEndClass} `}
  >
    <div class={`${widthClass ? widthClass : 'w-[200px]'} ring-1 ring-zinc-200 dark:ring-zinc-700 z-10 rounded-lg shadow-md bg-white dark:bg-zinc-800`}>
      <slot name="dropdown-content" />
    </div>
  </div>
</div>

<script>
  import Alpine from 'alpinejs';
  import anchor from '@alpinejs/anchor';

  Alpine.plugin(anchor);
</script>
