---
const { languages, src, iframeClass } = Astro.props;

const htmlContent = await Astro.slots.render('default');

import { Code } from 'astro:components';

import prettier from 'prettier';
import parserHtml from 'prettier/parser-html';
import parserAstro from 'prettier-plugin-astro';

const getFormattedCode = async (content, fileType = 'html') => {
  try {
    // Determine the parser based on the file type
    let parser;
    switch (fileType) {
      case 'astro':
        parser = 'astro'; // or 'html' if you treat Astro files as HTML
        break;
      case 'html':
        parser = 'html';
        break;
      // Add cases for other file types as needed
      default:
        parser = 'babel'; // Default parser
    }

    const formattedCode = await prettier.format(content, {
      parser: parser,
      plugins: [parserHtml, parserAstro],
    });
    return formattedCode;
  } catch (error) {
    console.error('Error formatting code:', error);
    throw error; // Re-throw the error for the caller to handle
  }
};

const shikiConfig = {
  wrap: true,
  experimentalThemes: {
    light: 'github-light',
    dark: 'github-dark',
  },
};

async function loadAndLogFile(filePath2) {
  try {
    // Using /* @vite-ignore */ to bypass static analysis
    const fileContent = await import(/* @vite-ignore */ `${filePath2}?raw`);
    return fileContent.default;
  } catch (error) {
    console.error('Error loading file:', error);
  }
}

// console.log(src);
// Usage example
const filePath = '/src/components/rinseui/templates/UsageMeter.astro'; // Dynamic variable
const astroContent = await loadAndLogFile(filePath);
---

<div x-show="mode == 'preview'" class="relative flex" x-ref="CodePreviewWrapper">
  <div class="flex-1">
    <iframe src={src} class={`rd-iframe w-full ${iframeClass ? iframeClass : ''}`}></iframe>
  </div>
  <div class="flex w-5 flex-none bg-zinc-200 dark:bg-white/10" x-bind:style="'width: ' + width + 'px;'">
    <div
      class="relative z-10 flex w-[20px] flex-none cursor-grab items-center justify-center bg-zinc-50 shadow-[-1px_0_0_0_rgba(0,0,0,0.1)] dark:bg-zinc-800 dark:shadow-[-1px_0_0_0_rgba(255,255,255,0.1)]"
      @mousedown="slideReady"
      @touchstart="slideReady"
      x-ref="CodePreviewHandle"
    >
      <div
        class="after:contents-[''] before:content-['']-[''] flex
      w-[4] gap-0.5 before:block before:h-3.5 before:w-px
      before:bg-gray-500 after:block after:h-3.5 after:w-px after:bg-gray-500"
      >
      </div>
    </div>
  </div>
</div>
<Code code={`${await getFormattedCode(astroContent, 'astro')}`} lang="astro" theme="github-dark-dimmed" />
<Code code={`${await getFormattedCode(htmlContent, 'html')}`} lang="js" theme="github-dark-dimmed" />
