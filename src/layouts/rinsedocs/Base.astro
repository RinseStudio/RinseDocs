---
import { ViewTransitions } from 'astro:transitions';
const { title, pageSettings, frontmatter } = Astro.props;
import '@/styles/rinsedocs.css';
let sidebarSetting, tocSetting, fluidWidthSetting;
sidebarSetting = pageSettings?.showSidebar ?? true;
tocSetting = pageSettings?.showTOC ?? true;
fluidWidthSetting = pageSettings?.enableFluidWidth ?? true;

const alpineData = `app(${[sidebarSetting]}, ${[tocSetting]}, ${[fluidWidthSetting]})`;
---

<!doctype html>
<html
  lang="en"
  x-data={alpineData}
  x-bind:class="$store.GLOBAL.darkMode ? 'dark' : ''"
  transition:animate="none"
>
  <head>
    <title>{title}</title>

    <!-- Meta -->
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="generator" content={Astro.generator} />

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- Preload font -->
    <link rel="preload" href="/fonts/InterVariable.woff2" as="font" type="font/woff2" crossorigin />
  </head>
  <body class="font-sans font-normal text-slate-500 antialiased dark:bg-black">
    <slot />
    <script>
      import Alpine from 'alpinejs';
      import persist from '@alpinejs/persist';
      import anchor from '@alpinejs/anchor';

      Alpine.plugin(persist);
      Alpine.plugin(anchor);

      window.Alpine = Alpine;

      // Initialize Alpine
      document.addEventListener('alpine:init', () => {
        Alpine.store('GLOBAL', {
          darkMode: false,
          showSidebar: true,
          showTOC: true,
          enableFluidWidth: true,
          sidebarScrollPos: 0,
          sidebarWidth: 240,
        });

        Alpine.data(
          'app',
          (sidebarSetting = true, tocSetting = true, fluidWidthSetting = true) => ({
            init() {
              const darkMode = localStorage.getItem('darkMode');
              const iframes = document.querySelectorAll('[data-rinse-ui] iframe');

              if (darkMode == 'true') {
                Alpine.store('GLOBAL').darkMode = true;
                iframes.forEach((iframe) => {
                  iframe.addEventListener('load', () => {
                    const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
                    const htmlElement = iframeDocument.documentElement;
                    console.log(htmlElement);
                    htmlElement.classList.add('dark');
                  });
                });
              } else {
                Alpine.store('GLOBAL').darkMode = false;
              }

              Alpine.store('GLOBAL').showSidebar = sidebarSetting;
              Alpine.store('GLOBAL').showTOC = tocSetting;
              Alpine.store('GLOBAL').enableFluidWidth = fluidWidthSetting;
              if (Alpine.store('GLOBAL').showSidebar == false) {
                const sidebar = document.querySelector('.app');
                sidebar.style.setProperty('--sidebar-width', 12 + 'px');
              }
            },
            APP: {
              toggleDarkMode() {
                Alpine.store('GLOBAL').darkMode = !Alpine.store('GLOBAL').darkMode;

                localStorage.setItem('darkMode', Alpine.store('GLOBAL').darkMode);

                const iframes = document.querySelectorAll('iframe.rd-iframe');

                iframes.forEach((iframe) => {
                  // Access the iframe's content document
                  const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;

                  // Access the <html> element inside the iframe
                  const htmlElement = iframeDocument.documentElement;

                  // Toggle the 'dark-mode' class on the <html> element
                  htmlElement.classList.toggle('dark');
                });
              },
              toggleTOC() {
                Alpine.store('GLOBAL').showTOC = !Alpine.store('GLOBAL').showTOC;
              },
              toggleSidebar() {
                Alpine.store('GLOBAL').showSidebar = true;
                const sidebar = document.querySelector('.app');
                sidebar.style.setProperty('--sidebar-width', '300px');
              },
              slideReady(e) {
                e.preventDefault();
                this.APP.slideMoveHandler = this.APP.slideMove.bind(this); // Save a reference to the bound slideMove function

                this.cursorOffset = e.clientX - this.$refs.slideHandle.getBoundingClientRect().x;
                document.body.style.pointerEvents = 'none';
                document.documentElement.style.cursor = 'grabbing';

                document.addEventListener('mousemove', this.APP.slideMoveHandler);
                document.addEventListener('mouseup', this.APP.slideFinish.bind(this));
              },
              slideFinish() {
                document.body.style.pointerEvents = 'auto';
                document.documentElement.style.cursor = 'default';
                document.removeEventListener('mousemove', this.APP.slideMoveHandler);
                this.$refs.slideHandle.style.opacity = '';
              },
              slideMove(e) {
                let sidebarWidth = e.clientX;
                const sidebar = document.querySelector('.app');
                this.$refs.slideHandle.style.opacity = 1;

                if (sidebarWidth >= 100 + this.cursorOffset) {
                  if (sidebarWidth >= 500 + this.cursorOffset) {
                    sidebar.style.setProperty(
                      '--sidebar-width',
                      500 - 48 - this.cursorOffset + 'px',
                    );
                    Alpine.store('GLOBAL').showSidebar = false;
                  } else {
                    sidebar.style.setProperty(
                      '--sidebar-width',
                      sidebarWidth - 48 - this.cursorOffset + 'px',
                    );
                  }

                  Alpine.store('GLOBAL').showSidebar = true;
                } else if (sidebarWidth <= 80 + this.cursorOffset) {
                  sidebar.style.setProperty('--sidebar-width', 12 + 'px');
                  Alpine.store('GLOBAL').showSidebar = false;
                } else {
                  sidebar.style.setProperty(
                    '--sidebar-width',
                    sidebarWidth - 48 - this.cursorOffset + 'px',
                  );
                  Alpine.store('GLOBAL').showSidebar = true;
                }
              },
            },
          }),
        );

        Alpine.data('pageLink', () => ({
          showTooltip: false,
          copyURL() {
            // Use the Clipboard API to copy the current URL to the clipboard
            navigator.clipboard
              .writeText(window.location.href)
              .then(() => {
                // Successfully copied to clipboard
                this.showTooltip = true; // Show the tooltip

                // Hide the tooltip after 2 seconds
                setTimeout(() => {
                  this.showTooltip = false;
                }, 2000);
              })
              .catch((err) => {
                // Handle errors (such as user not granting clipboard permissions)
                console.error('Failed to copy: ', err);
              });
          },
        }));

        Alpine.data('tooltip', () => ({
          tooltipVisible: false,
          showTooltip() {
            this.tooltipVisible = true; // Show the tooltip
          },
          hideTooltip() {
            this.tooltipVisible = false; // Hide the tooltip
          },
        }));

        Alpine.data('CodePreview', (langs = '', height = 200) => ({
          mode: 'preview',
          languageSelection: 0,
          showTooltip: false,
          cursorOffset: 0,
          width: null,
          iframeHeight: height,
          languages: langs,
          init: function () {
            document.addEventListener('resize', this.resetContainer.bind(this));
          },
          resetContainer(e) {
            e.preventDefault();
            this.width = this.$refs.CodePreviewWrapper.offsetWidth;
          },
          slideReady(e) {
            e.preventDefault();
            this.slideMoveHandler = this.slideMove.bind(this); // Save a reference to the bound slideMove function
            this.cursorOffset = e.clientX - this.$refs.CodePreviewHandle.getBoundingClientRect().x;
            document.body.style.pointerEvents = 'none';
            document.documentElement.style.cursor = 'grabbing';

            document.addEventListener('mousemove', this.slideMoveHandler);
            document.addEventListener('mouseup', this.slideFinish.bind(this));

            document.addEventListener('touchmove', this.slideMoveHandler);
            document.addEventListener('touchend', this.slideFinish.bind(this));
          },
          slideFinish() {
            document.body.style.pointerEvents = 'auto';
            document.documentElement.style.cursor = 'default';
            document.removeEventListener('mousemove', this.slideMoveHandler);
            document.removeEventListener('touchmove', this.slideMoveHandler);
          },
          slideMove(e) {
            let containerWidth = this.$refs.CodePreviewWrapper.offsetWidth;

            let slideWidth =
              this.$refs.CodePreviewWrapper.getBoundingClientRect().right - e.clientX;

            if (e.touches && e.touches[0]) {
              slideWidth =
                this.$refs.CodePreviewWrapper.getBoundingClientRect().right - e.touches[0].clientX;
            } else if (e.clientX) {
              slideWidth = this.$refs.CodePreviewWrapper.getBoundingClientRect().right - e.clientX;
            }

            if (slideWidth >= containerWidth - this.cursorOffset) {
              this.width = containerWidth;
            } else if (slideWidth <= 20 - this.cursorOffset) {
              this.width = 20;
            } else {
              this.width = slideWidth + this.cursorOffset;
            }
          },
          copyCode() {
            // Use the Clipboard API to copy the current Code to the clipboard
            const activeSlot = this.$refs.CodePreview.querySelector('.rd-frame-code.is-active');
            const codeContent = activeSlot ? activeSlot.innerText : '';
            navigator.clipboard
              .writeText(codeContent)
              .then(() => {
                // Successfully copied to clipboard
                this.showTooltip = true; // Show the tooltip

                // Hide the tooltip after 2 seconds
                setTimeout(() => {
                  this.showTooltip = false;
                }, 2000);
              })
              .catch((err) => {
                // Handle errors (such as user not granting clipboard permissions)
                console.error('Failed to copy: ', err);
              });
          },
          hideTooltip() {
            this.showTooltip = false; // Hide the tooltip
          },
        }));
      });

      const sidebarList = document.querySelector('.sidebar-list');
      const sidebarListItems = sidebarList.querySelectorAll('.sidebar-item');
      const currentURL = window.location.href;

      sidebarListItems.forEach((link) => {
        if (link.href === currentURL) {
          link.classList.add('is-active');
        }
      });

      document.addEventListener('astro:before-preparation', (ev) => {
        const app = document.querySelector('.app');
        const sidebarWidth = app.style.getPropertyValue('--sidebar-width');
        Alpine.store('GLOBAL').sidebarWidth = sidebarWidth;

        const sidebar = document.querySelector('.sidebar');
        Alpine.store('GLOBAL').sidebarScrollPos = sidebar.scrollTop;

        const sidebarList = document.querySelector('.sidebar-list');
        const sidebarListItems = sidebarList.querySelectorAll('.sidebar-item');

        const currentURL = window.location.href;
        sidebarListItems.forEach((link) => {
          link.classList.remove('is-active');
        });
      });

      document.addEventListener('astro:after-swap', () => {
        const app = document.querySelector('.app');
        app.style.setProperty('--sidebar-width', Alpine.store('GLOBAL').sidebarWidth);

        const sidebar = document.querySelector('.sidebar');
        sidebar.scrollTop = Alpine.store('GLOBAL').sidebarScrollPos;

        const sidebarList = document.querySelector('.sidebar-list');
        const sidebarListItems = sidebarList.querySelectorAll('.sidebar-item');

        const currentURL = window.location.href;
        sidebarListItems.forEach((link) => {
          if (link.href === currentURL) {
            link.classList.add('is-active');
          }
        });
      });
    </script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script is:inline>
      document.addEventListener('DOMContentLoaded', function () {
        Alpine.start();
        lucide.createIcons();
      });
    </script>
  </body>
</html>
