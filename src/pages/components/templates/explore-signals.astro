---
import Layout from '@/layouts/rinsedocs/Raw.astro';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/Tabs';
import { Button } from '@/components/Button';
import Card from '@/components/Card';
import Table from '@/components/Table';
import {
  Dropdown,
  DropdownContent,
  DropdownGroup,
  DropdownHeader,
  DropdownItem,
  DropdownList,
  DropdownDivider,
  DropdownTrigger,
} from '@/components/Dropdown';
import {
  Select,
  SelectGroup,
  SelectTrigger,
  SelectContent,
  SelectHeader,
  SelectList,
  SelectItem,
} from '@/components/Select';
import { Checkbox } from '@/components/Checkbox';
import { TextField } from '@/components/TextField';
import SelectField from '@/components/SelectField';
import SearchField from '@/components/SearchField/index.astro';

import { DeltaLabel } from '@/components/DeltaLabel';
import { Tooltip, TooltipTrigger, TooltipContent } from '@/components/Tooltip';

import { SignalMatrix } from '@/components/SignalMatrix';
import { ScoreMatrix } from '@/components/ScoreMatrix';
---

<Layout class="" x-data="{quickview_signalHeatMap: false}">
  <div
    class="fixed bottom-0 right-0 top-0 z-40 w-[756px] overflow-auto bg-white shadow-2xl"
    x-show="quickview_signalHeatMap == true"
    x-cloak
  >
    <header
      class="sticky top-0 z-20 flex items-center justify-between border-b border-zinc-200 bg-white px-5 py-3"
    >
      <ul class="flex items-center gap-4">
        <li class="text-sm font-semibold text-slate-900">Quickview</li>
        <li class="text-slate-300">/</li>
        <li
          class="flex items-center gap-2 text-xs font-semibold text-slate-900"
        >
          <i class="fa-solid fa-plane"></i> Impossible Travel
        </li>
      </ul>

      <div class="flex items-center gap-2">
        <Button size="sm" variant="secondary" class="">Close quickview</Button>
        <Button size="sm" class="">Go to signal</Button>
      </div>
    </header>
    <div class="px-5 py-6">
      <div
        class="mb-4 inline-flex items-center justify-center rounded bg-purple-100 px-2 py-1 text-xs font-medium text-purple-900"
      >
        Anomalous Behavior
      </div>
      <div
        class="mb-4 flex items-center gap-2 text-xl font-semibold text-slate-900"
      >
        <i class="fa-solid fa-plane"></i> Impossible Travel
      </div>
      <p class="mb-8 max-w-xl text-sm">
        Triggered by comparing the user's current location with their last known
        location and then detecting trips that are highly unlikely, or even
        impossible.
      </p>
      <div
        class="mb-4 flex h-[180px] items-center justify-center rounded-lg border border-zinc-200 bg-white shadow-[0px_4px_0px_-2px_rgba(0,0,0,0.025)]"
      >
        <div
          class="flex items-center gap-2 text-lg font-semibold text-slate-300"
        >
          <i class="fa-solid fa-chart-simple"></i> Activity chart
        </div>
      </div>
      <div
        class="rounded-lg border border-zinc-200 bg-white shadow-[0px_4px_0px_-2px_rgba(0,0,0,0.025)]"
      >
        <div class="px-5 py-4">
          <ul class="flex items-center gap-4">
            <li
              class="flex cursor-pointer items-center gap-2 text-sm font-medium text-slate-900"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-bar-chart-big"
                ><path d="M3 3v18h18"></path><rect
                  width="4"
                  height="7"
                  x="7"
                  y="10"
                  rx="1"></rect><rect width="4" height="12" x="15" y="5" rx="1"
                ></rect></svg
              >
              Events
            </li>
            <li
              class="flex cursor-pointer items-center gap-2 text-sm font-medium text-slate-400 hover:text-slate-900"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-users"
                ><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"
                ></path><circle cx="9" cy="7" r="4"></circle><path
                  d="M22 21v-2a4 4 0 0 0-3-3.87"></path><path
                  d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg
              >
              Users
            </li>
          </ul>
        </div>
        <div class="overflow-auto">
          <table
            class="w-full bg-white text-left dark:bg-zinc-900"
            x-data="{ showPageViewEvents: false, collapseScore: true }"
          >
            <thead>
              <tr class="border-b border-zinc-200 dark:border-zinc-800">
                <th class="px-1 py-2 first:pl-5">
                  <Checkbox />
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Button size="sm" variant="ghost" isSquare>
                    <i class="fa-solid fa-gauge"></i>
                  </Button>
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Button size="sm" variant="ghost" isSquare>
                    <i class="fa-solid fa-shield"></i>
                  </Button>
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Button size="sm" variant="ghost" isSquare>
                    <i class="fa-solid fa-robot"></i>
                  </Button>
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Dropdown>
                    <DropdownTrigger>
                      <Button size="sm" variant="ghost">
                        Policy
                        <Tooltip widthClass="w-[180px]" className="ml-2">
                          <TooltipTrigger>
                            <i class="fa-solid fa-fw fa-sparkles text-blue-500"
                            ></i>
                          </TooltipTrigger>
                          <TooltipContent
                            className="w-[200px]"
                            enterClassName="delay-1000"
                          >
                            This is a smart column. Castle automatically
                            enriches content using event data.
                          </TooltipContent>
                        </Tooltip>
                      </Button>
                    </DropdownTrigger>
                    <DropdownContent>
                      <DropdownGroup>
                        <DropdownList>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-up fa-fw"></i>
                            </div>
                            Sort ascending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-down fa-fw"></i>
                            </div>
                            Sort descending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-left fa-fw"></i>
                            </div>
                            Move left
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-right fa-fw"></i>
                            </div>
                            Move right
                          </DropdownItem>
                        </DropdownList>
                      </DropdownGroup>
                      <DropdownDivider />
                      <DropdownGroup>
                        <DropdownItem onClick="isOpen = false">
                          <div
                            class="flex items-center"
                            x-data="{isExpanded: false}"
                            @click.stop="isExpanded = !isExpanded"
                          >
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i
                                class="fa-solid fa-fw"
                                :class="isExpanded ? 'fa-arrow-left-to-line' : 'fa-arrows-left-right-to-line'"
                              ></i>
                            </div>
                            <div
                              x-text="isExpanded ? 'Collapse column' : 'Expand column'"
                            >
                              Expand column
                            </div>
                          </div>
                        </DropdownItem>
                        <DropdownItem onClick="isOpen = false">
                          <div class="mr-1.5 flex items-center justify-center">
                            <i class="fa-solid fa-eye-slash fa-fw"></i>
                          </div>
                          Hide column
                        </DropdownItem>
                      </DropdownGroup>
                    </DropdownContent>
                  </Dropdown>
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Dropdown>
                    <DropdownTrigger>
                      <Button size="sm" variant="ghost">
                        Event
                        <Tooltip widthClass="w-[180px]" className="ml-2">
                          <TooltipTrigger>
                            <i class="fa-solid fa-fw fa-sparkles text-blue-500"
                            ></i>
                          </TooltipTrigger>
                          <TooltipContent
                            className="w-[200px]"
                            enterClassName="delay-1000"
                          >
                            This is a smart column. Castle automatically
                            enriches content using event data.
                          </TooltipContent>
                        </Tooltip>
                      </Button>
                    </DropdownTrigger>
                    <DropdownContent>
                      <DropdownGroup>
                        <DropdownList>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-up fa-fw"></i>
                            </div>
                            Sort ascending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-down fa-fw"></i>
                            </div>
                            Sort descending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-left fa-fw"></i>
                            </div>
                            Move left
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-right fa-fw"></i>
                            </div>
                            Move right
                          </DropdownItem>
                        </DropdownList>
                      </DropdownGroup>
                      <DropdownDivider />
                      <DropdownGroup>
                        <DropdownItem onClick="isOpen = false">
                          <div
                            class="flex items-center"
                            x-data="{isExpanded: false}"
                            @click.stop="isExpanded = !isExpanded"
                          >
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i
                                class="fa-solid fa-fw"
                                :class="isExpanded ? 'fa-arrow-left-to-line' : 'fa-arrows-left-right-to-line'"
                              ></i>
                            </div>
                            <div
                              x-text="isExpanded ? 'Collapse column' : 'Expand column'"
                            >
                              Expand column
                            </div>
                          </div>
                        </DropdownItem>
                        <DropdownItem onClick="isOpen = false">
                          <div class="mr-1.5 flex items-center justify-center">
                            <i class="fa-solid fa-eye-slash fa-fw"></i>
                          </div>
                          Hide column
                        </DropdownItem>
                      </DropdownGroup>
                    </DropdownContent>
                  </Dropdown>
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Dropdown>
                    <DropdownTrigger>
                      <Button size="sm" variant="ghost">
                        User
                        <Tooltip widthClass="w-[180px]" className="ml-2">
                          <TooltipTrigger>
                            <i class="fa-solid fa-fw fa-sparkles text-blue-500"
                            ></i>
                          </TooltipTrigger>
                          <TooltipContent
                            className="w-[200px]"
                            enterClassName="delay-1000"
                          >
                            This is a smart column. Castle automatically
                            enriches content using event data.
                          </TooltipContent>
                        </Tooltip>
                      </Button>
                    </DropdownTrigger>
                    <DropdownContent>
                      <DropdownGroup>
                        <DropdownList>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-up fa-fw"></i>
                            </div>
                            Sort ascending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-down fa-fw"></i>
                            </div>
                            Sort descending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-left fa-fw"></i>
                            </div>
                            Move left
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-right fa-fw"></i>
                            </div>
                            Move right
                          </DropdownItem>
                        </DropdownList>
                      </DropdownGroup>
                      <DropdownDivider />
                      <DropdownGroup>
                        <DropdownItem onClick="isOpen = false">
                          <div
                            class="flex items-center"
                            x-data="{isExpanded: false}"
                            @click.stop="isExpanded = !isExpanded"
                          >
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i
                                class="fa-solid fa-fw"
                                :class="isExpanded ? 'fa-arrow-left-to-line' : 'fa-arrows-left-right-to-line'"
                              ></i>
                            </div>
                            <div
                              x-text="isExpanded ? 'Collapse column' : 'Expand column'"
                            >
                              Expand column
                            </div>
                          </div>
                        </DropdownItem>
                        <DropdownItem onClick="isOpen = false">
                          <div class="mr-1.5 flex items-center justify-center">
                            <i class="fa-solid fa-eye-slash fa-fw"></i>
                          </div>
                          Hide column
                        </DropdownItem>
                      </DropdownGroup>
                    </DropdownContent>
                  </Dropdown>
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Dropdown>
                    <DropdownTrigger>
                      <Button size="sm" variant="ghost">
                        Location
                        <Tooltip widthClass="w-[180px]" className="ml-2">
                          <TooltipTrigger>
                            <i class="fa-solid fa-fw fa-sparkles text-blue-500"
                            ></i>
                          </TooltipTrigger>
                          <TooltipContent
                            className="w-[200px]"
                            enterClassName="delay-1000"
                          >
                            This is a smart column. Castle automatically
                            enriches content using event data.
                          </TooltipContent>
                        </Tooltip>
                      </Button>
                    </DropdownTrigger>
                    <DropdownContent>
                      <DropdownGroup>
                        <DropdownList>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-up fa-fw"></i>
                            </div>
                            Sort ascending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-down fa-fw"></i>
                            </div>
                            Sort descending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-left fa-fw"></i>
                            </div>
                            Move left
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-right fa-fw"></i>
                            </div>
                            Move right
                          </DropdownItem>
                        </DropdownList>
                      </DropdownGroup>
                      <DropdownDivider />
                      <DropdownGroup>
                        <DropdownItem onClick="isOpen = false">
                          <div
                            class="flex items-center"
                            x-data="{isExpanded: false}"
                            @click.stop="isExpanded = !isExpanded"
                          >
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i
                                class="fa-solid fa-fw"
                                :class="isExpanded ? 'fa-arrow-left-to-line' : 'fa-arrows-left-right-to-line'"
                              ></i>
                            </div>
                            <div
                              x-text="isExpanded ? 'Collapse column' : 'Expand column'"
                            >
                              Expand column
                            </div>
                          </div>
                        </DropdownItem>
                        <DropdownItem onClick="isOpen = false">
                          <div class="mr-1.5 flex items-center justify-center">
                            <i class="fa-solid fa-eye-slash fa-fw"></i>
                          </div>
                          Hide column
                        </DropdownItem>
                      </DropdownGroup>
                    </DropdownContent>
                  </Dropdown>
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Dropdown>
                    <DropdownTrigger>
                      <Button size="sm" variant="ghost">
                        Connection
                        <Tooltip widthClass="w-[180px]" className="ml-2">
                          <TooltipTrigger>
                            <i class="fa-solid fa-fw fa-sparkles text-blue-500"
                            ></i>
                          </TooltipTrigger>
                          <TooltipContent
                            className="w-[200px]"
                            enterClassName="delay-1000"
                          >
                            This is a smart column. Castle automatically
                            enriches content using event data.
                          </TooltipContent>
                        </Tooltip>
                      </Button>
                    </DropdownTrigger>
                    <DropdownContent>
                      <DropdownGroup>
                        <DropdownList>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-up fa-fw"></i>
                            </div>
                            Sort ascending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-down fa-fw"></i>
                            </div>
                            Sort descending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-left fa-fw"></i>
                            </div>
                            Move left
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-right fa-fw"></i>
                            </div>
                            Move right
                          </DropdownItem>
                        </DropdownList>
                      </DropdownGroup>
                      <DropdownDivider />
                      <DropdownGroup>
                        <DropdownItem onClick="isOpen = false">
                          <div
                            class="flex items-center"
                            x-data="{isExpanded: false}"
                            @click.stop="isExpanded = !isExpanded"
                          >
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i
                                class="fa-solid fa-fw"
                                :class="isExpanded ? 'fa-arrow-left-to-line' : 'fa-arrows-left-right-to-line'"
                              ></i>
                            </div>
                            <div
                              x-text="isExpanded ? 'Collapse column' : 'Expand column'"
                            >
                              Expand column
                            </div>
                          </div>
                        </DropdownItem>
                        <DropdownItem onClick="isOpen = false">
                          <div class="mr-1.5 flex items-center justify-center">
                            <i class="fa-solid fa-eye-slash fa-fw"></i>
                          </div>
                          Hide column
                        </DropdownItem>
                      </DropdownGroup>
                    </DropdownContent>
                  </Dropdown>
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Dropdown>
                    <DropdownTrigger>
                      <Button size="sm" variant="ghost">
                        Device
                        <Tooltip widthClass="w-[180px]" className="ml-2">
                          <TooltipTrigger>
                            <i class="fa-solid fa-fw fa-sparkles text-blue-500"
                            ></i>
                          </TooltipTrigger>
                          <TooltipContent
                            className="w-[200px]"
                            enterClassName="delay-1000"
                          >
                            This is a smart column. Castle automatically
                            enriches content using event data.
                          </TooltipContent>
                        </Tooltip>
                      </Button>
                    </DropdownTrigger>
                    <DropdownContent>
                      <DropdownGroup>
                        <DropdownList>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-up fa-fw"></i>
                            </div>
                            Sort ascending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-down fa-fw"></i>
                            </div>
                            Sort descending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-left fa-fw"></i>
                            </div>
                            Move left
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-right fa-fw"></i>
                            </div>
                            Move right
                          </DropdownItem>
                        </DropdownList>
                      </DropdownGroup>
                      <DropdownDivider />
                      <DropdownGroup>
                        <DropdownItem onClick="isOpen = false">
                          <div
                            class="flex items-center"
                            x-data="{isExpanded: false}"
                            @click.stop="isExpanded = !isExpanded"
                          >
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i
                                class="fa-solid fa-fw"
                                :class="isExpanded ? 'fa-arrow-left-to-line' : 'fa-arrows-left-right-to-line'"
                              ></i>
                            </div>
                            <div
                              x-text="isExpanded ? 'Collapse column' : 'Expand column'"
                            >
                              Expand column
                            </div>
                          </div>
                        </DropdownItem>
                        <DropdownItem onClick="isOpen = false">
                          <div class="mr-1.5 flex items-center justify-center">
                            <i class="fa-solid fa-eye-slash fa-fw"></i>
                          </div>
                          Hide column
                        </DropdownItem>
                      </DropdownGroup>
                    </DropdownContent>
                  </Dropdown>
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Dropdown>
                    <DropdownTrigger>
                      <Button size="sm" variant="ghost">
                        List
                        <Tooltip widthClass="w-[180px]" className="ml-2">
                          <TooltipTrigger>
                            <i class="fa-solid fa-fw fa-sparkles text-blue-500"
                            ></i>
                          </TooltipTrigger>
                          <TooltipContent
                            className="w-[200px]"
                            enterClassName="delay-1000"
                          >
                            This is a smart column. Castle automatically
                            enriches content using event data.
                          </TooltipContent>
                        </Tooltip>
                      </Button>
                    </DropdownTrigger>
                    <DropdownContent>
                      <DropdownGroup>
                        <DropdownList>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-up fa-fw"></i>
                            </div>
                            Sort ascending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-down fa-fw"></i>
                            </div>
                            Sort descending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-left fa-fw"></i>
                            </div>
                            Move left
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-right fa-fw"></i>
                            </div>
                            Move right
                          </DropdownItem>
                        </DropdownList>
                      </DropdownGroup>
                      <DropdownDivider />
                      <DropdownGroup>
                        <DropdownItem onClick="isOpen = false">
                          <div
                            class="flex items-center"
                            x-data="{isExpanded: false}"
                            @click.stop="isExpanded = !isExpanded"
                          >
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i
                                class="fa-solid fa-fw"
                                :class="isExpanded ? 'fa-arrow-left-to-line' : 'fa-arrows-left-right-to-line'"
                              ></i>
                            </div>
                            <div
                              x-text="isExpanded ? 'Collapse column' : 'Expand column'"
                            >
                              Expand column
                            </div>
                          </div>
                        </DropdownItem>
                        <DropdownItem onClick="isOpen = false">
                          <div class="mr-1.5 flex items-center justify-center">
                            <i class="fa-solid fa-eye-slash fa-fw"></i>
                          </div>
                          Hide column
                        </DropdownItem>
                      </DropdownGroup>
                    </DropdownContent>
                  </Dropdown>
                </th>
                <th class="px-1 py-2 first:pl-5">
                  <Dropdown>
                    <DropdownTrigger>
                      <Button size="sm" variant="ghost">
                        Triggered Signal
                        <Tooltip widthClass="w-[180px]" className="ml-2">
                          <TooltipTrigger>
                            <i class="fa-solid fa-fw fa-sparkles text-blue-500"
                            ></i>
                          </TooltipTrigger>
                          <TooltipContent
                            className="w-[200px]"
                            enterClassName="delay-1000"
                          >
                            This is a smart column. Castle automatically
                            enriches content using event data.
                          </TooltipContent>
                        </Tooltip>
                      </Button>
                    </DropdownTrigger>
                    <DropdownContent>
                      <DropdownGroup>
                        <DropdownList>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-up fa-fw"></i>
                            </div>
                            Sort ascending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-down fa-fw"></i>
                            </div>
                            Sort descending
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-left fa-fw"></i>
                            </div>
                            Move left
                          </DropdownItem>
                          <DropdownItem onClick="isOpen = false">
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i class="fa-solid fa-arrow-right fa-fw"></i>
                            </div>
                            Move right
                          </DropdownItem>
                        </DropdownList>
                      </DropdownGroup>
                      <DropdownDivider />
                      <DropdownGroup>
                        <DropdownItem onClick="isOpen = false">
                          <div
                            class="flex items-center"
                            x-data="{isExpanded: false}"
                            @click.stop="isExpanded = !isExpanded"
                          >
                            <div
                              class="mr-1.5 flex items-center justify-center"
                            >
                              <i
                                class="fa-solid fa-fw"
                                :class="isExpanded ? 'fa-arrow-left-to-line' : 'fa-arrows-left-right-to-line'"
                              ></i>
                            </div>
                            <div
                              x-text="isExpanded ? 'Collapse column' : 'Expand column'"
                            >
                              Expand column
                            </div>
                          </div>
                        </DropdownItem>
                        <DropdownItem onClick="isOpen = false">
                          <div class="mr-1.5 flex items-center justify-center">
                            <i class="fa-solid fa-eye-slash fa-fw"></i>
                          </div>
                          Hide column
                        </DropdownItem>
                      </DropdownGroup>
                    </DropdownContent>
                  </Dropdown>
                </th>
                <th class="h-10 w-full px-1 first:pl-5"> </th>
              </tr>
            </thead>
            <tbody class="medium color-cool-gray-600 text-xs">
              <tr class="border-b border-zinc-200 dark:border-zinc-800">
                <td class="h-[400px]"></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <div
    class="app grid grid-cols-[var(--sidebar-width),1fr]"
    style="--sidebar-width: 240px"
  >
    <aside
      class="sticky top-0 flex h-[100dvh] min-w-[200px] max-w-[400px] flex-none"
    >
      Castle Sidebar
    </aside>

    <main class="relative border-l border-zinc-200 bg-slate-50">
      <div
        @mousedown="APP.slideReady"
        x-ref="slideHandle"
        class="absolute bottom-0 left-0 top-0 z-30 flex w-[10px] cursor-grab justify-start opacity-0 duration-300 hover:opacity-100"
      >
        <div class="w-[2px] bg-blue-400"></div>
      </div>

      <div
        class="flex items-center justify-between border-b border-zinc-200 bg-white px-5 py-4"
      >
        <div class="flex items-center gap-4">
          <h1 class="text-lg font-bold text-black">Explore</h1>
          <button
            class="flex items-center gap-1.5 text-xs font-semibold text-gray-900 hover:text-blue-500"
          >
            <i class="fa-solid fa-plus"></i>
            Add metric row
          </button>
        </div>
        <div class="flex items-center gap-3">
          <Dropdown>
            <DropdownTrigger>
              <Button
                size="sm"
                variant="outline"
                className="w-[200px] justify-between pl-2 pr-8"
              >
                <div class="flex items-center gap-2.5">
                  <div
                    class="flex h-[18px] items-center rounded bg-black px-1.5 text-[10px] uppercase text-white"
                  >
                    7d
                  </div>
                  Past week
                </div>
                <div
                  class="absolute right-0 top-0 flex size-8 items-center justify-center"
                >
                  <i data-lucide="calendar-days" class="size-3.5 text-gray-400"
                  ></i>
                </div>
              </Button>
            </DropdownTrigger>
            <DropdownContent className="w-full">Rangepicker</DropdownContent>
          </Dropdown>
          <Button isSquare size="sm" variant="outline" className="p-0">
            <i data-lucide="refresh-ccw" class="size-3.5 text-zinc-900"></i>
          </Button>
          <Button size="sm">Save as view</Button>
        </div>
      </div>

      <div class="flex flex-col gap-5 px-5 py-4">
        <div class="space-y-2">
          <div
            class="flex items-center gap-2 rounded-md bg-slate-200 px-3 py-2"
          >
            <div
              class="flex size-6 items-center justify-center rounded-full bg-slate-900 text-xs text-white"
            >
              <i class="fa-solid fa-filter-list"></i>
            </div>
            <div
              class="flex h-8 items-center rounded-md bg-white px-3 text-xs text-zinc-900 shadow"
            >
              <span>
                Policy is <span class="font-semibold">Block fake accounts</span>
              </span>
            </div>
            <div
              class="flex h-8 items-center rounded-md bg-white px-3 text-xs text-zinc-900 shadow"
            >
              <span>
                Policy is <span class="font-semibold">Block fake accounts</span>
              </span>
            </div>
          </div>
        </div>

        <ul class="flex flex-wrap gap-2">
          <li
            class="flex h-8 cursor-pointer items-center gap-2.5 rounded-md bg-blue-400/30 px-3 text-[13px] font-semibold text-zinc-900"
          >
            <i class="fa-solid fa-filter-list text-blue-500"></i>
            Events (4,201)
          </li>
          <li
            class="flex h-8 cursor-pointer items-center gap-2.5 rounded-md bg-slate-400/[0.15] px-3 text-[13px] font-semibold text-zinc-900 hover:bg-slate-400/[0.25]"
          >
            <i class="fa-solid fa-exclamation-triangle text-slate-500"></i>
            Signals (12)
          </li>
          <li
            class="flex h-8 cursor-pointer items-center gap-2.5 rounded-md bg-slate-400/[0.15] px-3 text-[13px] font-semibold text-zinc-900 hover:bg-slate-400/[0.25]"
          >
            <i class="fa-solid fa-mobile text-slate-500"></i>
            Devices (24)
          </li>
          <li
            class="flex h-8 cursor-pointer items-center gap-2.5 rounded-md bg-slate-400/[0.15] px-3 text-[13px] font-semibold text-zinc-900 hover:bg-slate-400/[0.25]"
          >
            <i class="fa-solid fa-user text-slate-500"></i>
            Users (24)
          </li>
          <li
            class="flex h-8 cursor-pointer items-center gap-2.5 rounded-md bg-slate-400/[0.15] px-3 text-[13px] font-semibold text-zinc-900 hover:bg-slate-400/[0.25]"
          >
            <i class="fa-solid fa-user text-slate-500"></i>
            Organizations (24)
            <div class="text-slate-500 hover:text-slate-900">
              <i class="fa-solid fa-times"></i>
            </div>
          </li>
        </ul>

        <section
          class="rounded-lg border border-zinc-200 bg-white shadow-[0px_4px_0px_-2px_rgba(0,0,0,0.025)]"
        >
          <div
            class="flex items-center justify-between border-b border-zinc-200 px-5 py-3"
          >
            <ul class="flex items-center gap-4">
              <li
                class="flex cursor-pointer items-center gap-2 text-sm font-medium text-slate-400 hover:text-slate-900"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-bar-chart-big"
                  ><path d="M3 3v18h18"></path><rect
                    width="4"
                    height="7"
                    x="7"
                    y="10"
                    rx="1"></rect><rect
                    width="4"
                    height="12"
                    x="15"
                    y="5"
                    rx="1"></rect></svg
                >
                Events
              </li>
              <li
                class="flex cursor-pointer items-center gap-2 text-sm font-medium text-slate-400 hover:text-slate-900"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-list-ordered"
                  ><line x1="10" x2="21" y1="6" y2="6"></line><line
                    x1="10"
                    x2="21"
                    y1="12"
                    y2="12"></line><line x1="10" x2="21" y1="18" y2="18"
                  ></line><path d="M4 6h1v4"></path><path d="M4 10h2"
                  ></path><path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1"></path></svg
                >
                Top chart
              </li>
              <li
                class="flex cursor-pointer items-center gap-2 text-sm font-medium text-slate-400 hover:text-slate-900"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-earth"
                  ><path d="M21.54 15H17a2 2 0 0 0-2 2v4.54"></path><path
                    d="M7 3.34V5a3 3 0 0 0 3 3a2 2 0 0 1 2 2c0 1.1.9 2 2 2a2 2 0 0 0 2-2c0-1.1.9-2 2-2h3.17"
                  ></path><path
                    d="M11 21.95V18a2 2 0 0 0-2-2a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05"
                  ></path><circle cx="12" cy="12" r="10"></circle></svg
                >
                Geo chart
              </li>
              <li
                class="flex cursor-pointer items-center gap-2 text-sm font-medium text-slate-900"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-triangle-alert"
                  ><path
                    d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"
                  ></path><path d="M12 9v4"></path><path d="M12 17h.01"
                  ></path></svg
                >
                Heatmap
              </li>
            </ul>
            <Select isOpen>
              <SelectTrigger>Group by</SelectTrigger>
              <SelectContent className="w-[160px]">
                <SelectGroup>
                  <SelectHeader>Select attribute</SelectHeader>
                  <SelectList>
                    <SelectItem value="light">
                      <div class="flex items-center gap-1.5">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          class="lucide lucide-triangle-alert"
                          ><path
                            d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"
                          ></path><path d="M12 9v4"></path><path d="M12 17h.01"
                          ></path></svg
                        >
                        Signals
                      </div>
                    </SelectItem>
                    <SelectItem value="dark">
                      <div class="flex items-center gap-1.5">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          class="lucide lucide-circle-gauge"
                          ><path d="M15.6 2.7a10 10 0 1 0 5.7 5.7"
                          ></path><circle cx="12" cy="12" r="2"></circle><path
                            d="M13.4 10.6 19 5"></path></svg
                        >
                        Risk Score
                      </div>
                    </SelectItem>
                  </SelectList>
                </SelectGroup>
              </SelectContent>
            </Select>
          </div>
          <div class="px-5 py-5">
            <SignalMatrix />
          </div>
        </section>

        <section
          class="rounded-lg border border-zinc-200 bg-white shadow-[0px_4px_0px_-2px_rgba(0,0,0,0.025)]"
        >
          <div class="border-b border-zinc-200 px-5 py-4">
            <ul class="flex items-center gap-4">
              <li
                class="flex cursor-pointer items-center gap-2 text-sm font-medium text-slate-400 hover:text-slate-900"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-bar-chart-big"
                  ><path d="M3 3v18h18"></path><rect
                    width="4"
                    height="7"
                    x="7"
                    y="10"
                    rx="1"></rect><rect
                    width="4"
                    height="12"
                    x="15"
                    y="5"
                    rx="1"></rect></svg
                >
                Events
              </li>
              <li
                class="flex cursor-pointer items-center gap-2 text-sm font-medium text-slate-400 hover:text-slate-900"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-list-ordered"
                  ><line x1="10" x2="21" y1="6" y2="6"></line><line
                    x1="10"
                    x2="21"
                    y1="12"
                    y2="12"></line><line x1="10" x2="21" y1="18" y2="18"
                  ></line><path d="M4 6h1v4"></path><path d="M4 10h2"
                  ></path><path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1"></path></svg
                >
                Top chart
              </li>
              <li
                class="flex cursor-pointer items-center gap-2 text-sm font-medium text-slate-400 hover:text-slate-900"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-earth"
                  ><path d="M21.54 15H17a2 2 0 0 0-2 2v4.54"></path><path
                    d="M7 3.34V5a3 3 0 0 0 3 3a2 2 0 0 1 2 2c0 1.1.9 2 2 2a2 2 0 0 0 2-2c0-1.1.9-2 2-2h3.17"
                  ></path><path
                    d="M11 21.95V18a2 2 0 0 0-2-2a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05"
                  ></path><circle cx="12" cy="12" r="10"></circle></svg
                >
                Geo chart
              </li>
              <li
                class="flex cursor-pointer items-center gap-2 text-sm font-medium text-slate-900"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-triangle-alert"
                  ><path
                    d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"
                  ></path><path d="M12 9v4"></path><path d="M12 17h.01"
                  ></path></svg
                >
                Heatmap
              </li>
            </ul>
          </div>
          <div class="px-5 py-5">
            <ScoreMatrix />
          </div>
        </section>
      </div>
    </main>
  </div>
</Layout>

<script>
  import Chart from 'chart.js/auto';

  document.addEventListener('DOMContentLoaded', (event) => {
    // Your chart initialization code here
    const loginActivityChart = new Chart(
      document.getElementById('loginActivityChart').getContext('2d'),
      {
        type: 'bar',
        data: {
          labels: Array.from({ length: 80 }, (_, i) => `Bar ${i + 1}`),
          datasets: [
            {
              label: 'Segment 3',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * 25),
              ),
              backgroundColor: '#ef4444',
              stack: 'Stack 0',
            },
            {
              label: 'Segment 2',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * (75 - 25) + 25),
              ),
              backgroundColor: '#22C55E',
              stack: 'Stack 0',
            },
            {
              label: 'Segment 1',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * (100 - 50) + 50),
              ),
              backgroundColor: '#e2e8f0',
              stack: 'Stack 0',
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false, // This will hide the legend
            },
            tooltip: {
              xAlign: 'center',
              yAlign: 'bottom',
              displayColors: false,
              backgroundColor: 'black', // Set background color
              titleColor: '#fff', // Set title font color
              bodyColor: '#fff', // Set body font color,
              bodyFont: {
                size: 11,
              },
              callbacks: {
                label: function (context) {
                  return context.parsed.y + ' ' + 'Activity';
                },
                title: function (tooltipItems) {
                  // Customize the tooltip title
                  if (tooltipItems.length > 0) {
                    var firstItem = tooltipItems[0];
                    return firstItem.label;
                  }
                  return '';
                },
              },
            },
          },
          scales: {
            x: {
              stacked: true,
              grid: {
                display: false, // Display grid lines on the x-axis
              },
            },
            y: {
              stacked: true,
            },
          },
        },
      },
    );

    const loginActionChart = new Chart(
      document.getElementById('loginActionChart').getContext('2d'),
      {
        type: 'bar',
        data: {
          labels: Array.from({ length: 80 }, (_, i) => `Bar ${i + 1}`),
          datasets: [
            {
              label: 'Segment 3',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * 10),
              ),
              backgroundColor: '#ef4444',
              stack: 'Stack 0',
            },
            {
              label: 'Segment 2',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * 40),
              ),
              backgroundColor: '#fdba74',
              stack: 'Stack 0',
            },
            {
              label: 'Segment 1',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * 100),
              ),
              backgroundColor: '#e2e8f0',
              stack: 'Stack 0',
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false, // This will hide the legend
            },
            tooltip: {
              xAlign: 'center',
              yAlign: 'bottom',
              displayColors: false,
              backgroundColor: 'black', // Set background color
              titleColor: '#fff', // Set title font color
              bodyColor: '#fff', // Set body font color,
              bodyFont: {
                size: 11,
              },
              callbacks: {
                label: function (context) {
                  return context.parsed.y + ' ' + 'Activity';
                },
                title: function (tooltipItems) {
                  // Customize the tooltip title
                  if (tooltipItems.length > 0) {
                    var firstItem = tooltipItems[0];
                    return firstItem.label;
                  }
                  return '';
                },
              },
            },
          },
          scales: {
            x: {
              stacked: true,
              grid: {
                display: false, // Display grid lines on the x-axis
              },
            },
            y: {
              stacked: true,
            },
          },
        },
      },
    );

    const loginTriggeredPoliciesChart = new Chart(
      document.getElementById('loginTriggeredPoliciesChart').getContext('2d'),
      {
        type: 'pie', // Type of chart
        data: {
          labels: ['Red', 'Blue', 'Yellow'], // Labels for the segments
          datasets: [
            {
              label: 'My First Dataset',
              data: [200, 100, 50, 30, 20, 15], // Data points for each segment
              backgroundColor: [
                '#f97316',
                '#f97316',
                '#ef4444',
                '#ef4444',
                '#ef4444',
              ],
            },
          ],
        },
        options: {
          plugins: {
            tooltip: {
              enabled: false,
            },
            legend: {
              display: false, // This will hide the legend
            },
          },
        },
      },
    );

    const loginTriggeredSignalsChart = new Chart(
      document.getElementById('loginTriggeredSignalsChart').getContext('2d'),
      {
        type: 'pie', // Type of chart
        data: {
          labels: ['Red', 'Blue', 'Yellow'], // Labels for the segments
          datasets: [
            {
              label: 'My First Dataset',
              data: [100, 40, 40, 30, 20, 12, 10, 5], // Data points for each segment
              backgroundColor: [
                '#d1d5db',
                '#f97316',
                '#fbbf24',
                '#22c55e',
                '#14b8a6',
                '#0ea5e9',
                '#6366f1',
                '#000000',
              ],
            },
          ],
        },
        options: {
          plugins: {
            tooltip: {
              enabled: false,
            },
            legend: {
              display: false, // This will hide the legend
            },
          },
        },
      },
    );

    // Registration chart
    const registrationActivityChart = new Chart(
      document.getElementById('registrationActivityChart').getContext('2d'),
      {
        type: 'bar',
        data: {
          labels: Array.from({ length: 80 }, (_, i) => `Bar ${i + 1}`),
          datasets: [],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false, // This will hide the legend
            },
            tooltip: {
              xAlign: 'center',
              yAlign: 'bottom',
              displayColors: false,
              backgroundColor: 'black', // Set background color
              titleColor: '#fff', // Set title font color
              bodyColor: '#fff', // Set body font color,
              bodyFont: {
                size: 11,
              },
              callbacks: {
                label: function (context) {
                  return context.parsed.y + ' ' + 'Activity';
                },
                title: function (tooltipItems) {
                  // Customize the tooltip title
                  if (tooltipItems.length > 0) {
                    var firstItem = tooltipItems[0];
                    return firstItem.label;
                  }
                  return '';
                },
              },
            },
          },
          scales: {
            x: {
              stacked: true,
              grid: {
                display: false, // Display grid lines on the x-axis
              },
            },
            y: {
              stacked: true,
            },
          },
        },
      },
    );

    const registrationActionChart = new Chart(
      document.getElementById('registrationActionChart').getContext('2d'),
      {
        type: 'bar',
        data: {
          labels: Array.from({ length: 80 }, (_, i) => `Bar ${i + 1}`),
          datasets: [],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false, // This will hide the legend
            },
            tooltip: {
              xAlign: 'center',
              yAlign: 'bottom',
              displayColors: false,
              backgroundColor: 'black', // Set background color
              titleColor: '#fff', // Set title font color
              bodyColor: '#fff', // Set body font color,
              bodyFont: {
                size: 11,
              },
              callbacks: {
                label: function (context) {
                  return context.parsed.y + ' ' + 'Activity';
                },
                title: function (tooltipItems) {
                  // Customize the tooltip title
                  if (tooltipItems.length > 0) {
                    var firstItem = tooltipItems[0];
                    return firstItem.label;
                  }
                  return '';
                },
              },
            },
          },
          scales: {
            x: {
              stacked: true,
              grid: {
                display: false, // Display grid lines on the x-axis
              },
            },
            y: {
              stacked: true,
            },
          },
        },
      },
    );
  });
</script>
