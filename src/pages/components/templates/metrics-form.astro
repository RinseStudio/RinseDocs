---
import Layout from '@/layouts/rinsedocs/Raw.astro';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/Tabs';
import { Button } from '@/components/Button';
import Card from '@/components/Card';
import Table from '@/components/Table';
import {
  Dropdown,
  DropdownContent,
  DropdownGroup,
  DropdownHeader,
  DropdownItem,
  DropdownList,
  DropdownDivider,
  DropdownTrigger,
} from '@/components/Dropdown';
import {
  Select,
  SelectGroup,
  SelectTrigger,
  SelectContent,
  SelectHeader,
  SelectList,
  SelectItem,
} from '@/components/Select';
import { Checkbox } from '@/components/Checkbox';
import { TextField } from '@/components/TextField';
import SelectField from '@/components/SelectField';
import SearchField from '@/components/SearchField/index.astro';

import { DeltaLabel } from '@/components/DeltaLabel';
import { Tooltip, TooltipTrigger, TooltipContent } from '@/components/Tooltip';
---

<Layout class="bg-slate-50">
  <div
    class="mx-auto flex min-h-screen max-w-[900px] flex-col gap-5 bg-white px-5 py-4 shadow-xl"
  >
    <div class="space-y-2">
      <div
        class="flex items-start justify-between gap-2 rounded-md bg-slate-800 px-4 py-3"
      >
        <div class="flex flex-wrap items-start gap-1">
          <span class="flex h-6 items-center text-xs font-medium text-slate-400"
            >Start typing operators or `$` to create a new metric.</span
          >
        </div>
        <div>
          <a
            href="#"
            class="h-6 text-xs font-semibold text-blue-400 hover:text-blue-300"
            >Learn more</a
          >
        </div>
      </div>

      <div x-data="{metricSelection: 0}">
        <div
          class="flex items-start justify-between gap-2 rounded-md bg-slate-800 px-3 py-3"
        >
          <div class="flex flex-wrap items-start gap-1">
            <span
              class="flex h-6 items-center font-mono text-xs font-medium text-lime-400"
              >(</span
            >
            <button
              @click="metricSelection = 1"
              class="font-regular flex h-6 items-center rounded bg-white px-2.5 text-xs text-slate-900 duration-200 hover:text-blue-600"
              :class="{'bg-blue-500 text-white': metricSelection == 1, 'bg-white text-slate-900 hover:text-blue-600': metricSelection != 1}"
            >
              <span
                >Count Events <span class="font-bold">Failed logins</span></span
              >
            </button>
            <span
              class="flex h-6 items-center font-mono text-xs font-medium text-lime-400"
              >)</span
            >
            <span
              class="flex h-6 items-center font-mono text-xs font-medium text-teal-400"
              >/</span
            >
            <span
              class="flex h-6 items-center font-mono text-xs font-medium text-lime-400"
              >(</span
            >
            <button
              @click="metricSelection = 2"
              class="font-regular flex h-6 items-center rounded bg-white px-2.5 text-xs text-slate-900 duration-200 hover:text-blue-600"
              :class="{'bg-blue-500 text-white': metricSelection == 2, 'bg-white text-slate-900 hover:text-blue-600': metricSelection != 2}"
            >
              <span
                >Count Events <span class="font-bold">Failed logins</span></span
              >
            </button>
            <span
              class="flex h-6 items-center font-mono text-xs font-medium text-lime-400"
              >)</span
            >
          </div>
          <div>
            <a
              href="#"
              class="h-8 text-xs font-semibold text-blue-400 hover:text-blue-300"
              >Learn more</a
            >
          </div>
        </div>

        <div
          x-show="metricSelection == 1 || metricSelection == 2"
          class="rounded-md shadow-md"
        >
          <div class="space-y-3 px-4 py-4">
            <div class="flex items-center">
              <div class="w-[100px] text-xs font-semibold text-slate-400">
                Function
              </div>
              <div class="flex items-center gap-4">
                <div>
                  <Dropdown>
                    <DropdownTrigger>
                      <button
                        class="flex h-8 items-center rounded px-2 text-xs font-medium text-zinc-500 shadow hover:text-zinc-900"
                      >
                        Set method
                      </button>
                    </DropdownTrigger>

                    <DropdownContent className="w-[288px]">
                      <div class="space-y-3 px-3 py-3">
                        <Select className="w-full">
                          <SelectTrigger size="sm">
                            Select function
                          </SelectTrigger>
                          <SelectContent className="w-full">
                            <SelectGroup>
                              <SelectList>
                                <SelectItem value="average">Average</SelectItem>
                                <SelectItem value="count-events">
                                  Count Events
                                </SelectItem>
                                <SelectItem value="count-uniqiue">
                                  Count Unique
                                </SelectItem>
                                <SelectItem value="first">First</SelectItem>
                              </SelectList>
                            </SelectGroup>
                          </SelectContent>
                        </Select>

                        <Select className="w-full">
                          <SelectTrigger size="sm">Select field</SelectTrigger>
                          <SelectContent className="w-full">
                            <SelectGroup>
                              <SelectList>
                                <SelectItem value="average">Average</SelectItem>
                                <SelectItem value="count-events">
                                  Count Events
                                </SelectItem>
                                <SelectItem value="count-uniqiue">
                                  Count Unique
                                </SelectItem>
                                <SelectItem value="first">First</SelectItem>
                              </SelectList>
                            </SelectGroup>
                          </SelectContent>
                        </Select>
                      </div>
                    </DropdownContent>
                  </Dropdown>
                </div>
                <div class="text-xs font-semibold text-slate-400">within</div>
                <div>
                  <div>
                    <Dropdown>
                      <DropdownTrigger>
                        <button
                          class="flex h-8 items-center rounded px-2 text-xs font-medium text-zinc-900 shadow hover:text-blue-500"
                        >
                          5 minutes
                        </button>
                      </DropdownTrigger>

                      <DropdownContent className="w-[288px]">
                        <div class="space-y-3 px-3 py-3">
                          <div class="flex gap-2">
                            <TextField type="text" placeholder="e.g. 3600" />

                            <Select className="w-full">
                              <SelectTrigger>minute</SelectTrigger>
                              <SelectContent className="w-full">
                                <SelectGroup>
                                  <SelectList>
                                    <SelectItem value="average">
                                      minute
                                    </SelectItem>
                                    <SelectItem value="count-events">
                                      second
                                    </SelectItem>
                                    <SelectItem value="count-uniqiue">
                                      hour
                                    </SelectItem>
                                    <SelectItem value="first">day</SelectItem>
                                  </SelectList>
                                </SelectGroup>
                              </SelectContent>
                            </Select>
                          </div>
                          <label
                            class="flex items-center text-xs font-medium text-gray-900"
                          >
                            <Checkbox className="mr-2" checked /> Maximum time
                          </label>
                        </div>
                      </DropdownContent>
                    </Dropdown>
                  </div>
                </div>
              </div>
            </div>
            <div class="flex items-center">
              <div class="w-[100px] text-xs font-semibold text-slate-400">
                Where
              </div>
              <div
                class="flex flex-1 flex-wrap items-start rounded-md bg-slate-50 p-2"
              >
                <button
                  class="size-7 rounded border-2 border-dashed border-slate-300 hover:bg-slate-100"
                >
                  <i class="fa-solid fa-plus text-xs"></i>
                </button>
              </div>
            </div>
            <div class="flex items-center">
              <div class="w-[100px] text-xs font-semibold text-slate-400">
                Group by
              </div>
              <div
                class="flex flex-1 flex-wrap items-start rounded-md bg-slate-50 p-2"
              >
                <button
                  class="size-7 rounded border-2 border-dashed border-slate-300 hover:bg-slate-100"
                >
                  <i class="fa-solid fa-plus text-xs"></i>
                </button>
              </div>
            </div>
          </div>
          <div
            class="flex items-start justify-end gap-2 border-t border-zinc-200 px-3 py-3"
          >
            <Button @click="metricSelection = 0" size="sm" variant="secondary">
              Cancel
            </Button>
            <Button @click="metricSelection = 0" size="sm">Update</Button>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import Chart from 'chart.js/auto';

  document.addEventListener('DOMContentLoaded', (event) => {
    // Your chart initialization code here
    const loginActivityChart = new Chart(
      document.getElementById('loginActivityChart').getContext('2d'),
      {
        type: 'bar',
        data: {
          labels: Array.from({ length: 80 }, (_, i) => `Bar ${i + 1}`),
          datasets: [
            {
              label: 'Segment 3',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * 25),
              ),
              backgroundColor: '#ef4444',
              stack: 'Stack 0',
            },
            {
              label: 'Segment 2',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * (75 - 25) + 25),
              ),
              backgroundColor: '#22C55E',
              stack: 'Stack 0',
            },
            {
              label: 'Segment 1',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * (100 - 50) + 50),
              ),
              backgroundColor: '#e2e8f0',
              stack: 'Stack 0',
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false, // This will hide the legend
            },
            tooltip: {
              xAlign: 'center',
              yAlign: 'bottom',
              displayColors: false,
              backgroundColor: 'black', // Set background color
              titleColor: '#fff', // Set title font color
              bodyColor: '#fff', // Set body font color,
              bodyFont: {
                size: 11,
              },
              callbacks: {
                label: function (context) {
                  return context.parsed.y + ' ' + 'Activity';
                },
                title: function (tooltipItems) {
                  // Customize the tooltip title
                  if (tooltipItems.length > 0) {
                    var firstItem = tooltipItems[0];
                    return firstItem.label;
                  }
                  return '';
                },
              },
            },
          },
          scales: {
            x: {
              stacked: true,
              grid: {
                display: false, // Display grid lines on the x-axis
              },
            },
            y: {
              stacked: true,
            },
          },
        },
      },
    );

    const loginActionChart = new Chart(
      document.getElementById('loginActionChart').getContext('2d'),
      {
        type: 'bar',
        data: {
          labels: Array.from({ length: 80 }, (_, i) => `Bar ${i + 1}`),
          datasets: [
            {
              label: 'Segment 3',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * 10),
              ),
              backgroundColor: '#ef4444',
              stack: 'Stack 0',
            },
            {
              label: 'Segment 2',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * 40),
              ),
              backgroundColor: '#fdba74',
              stack: 'Stack 0',
            },
            {
              label: 'Segment 1',
              data: Array.from({ length: 80 }, () =>
                Math.floor(Math.random() * 100),
              ),
              backgroundColor: '#e2e8f0',
              stack: 'Stack 0',
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false, // This will hide the legend
            },
            tooltip: {
              xAlign: 'center',
              yAlign: 'bottom',
              displayColors: false,
              backgroundColor: 'black', // Set background color
              titleColor: '#fff', // Set title font color
              bodyColor: '#fff', // Set body font color,
              bodyFont: {
                size: 11,
              },
              callbacks: {
                label: function (context) {
                  return context.parsed.y + ' ' + 'Activity';
                },
                title: function (tooltipItems) {
                  // Customize the tooltip title
                  if (tooltipItems.length > 0) {
                    var firstItem = tooltipItems[0];
                    return firstItem.label;
                  }
                  return '';
                },
              },
            },
          },
          scales: {
            x: {
              stacked: true,
              grid: {
                display: false, // Display grid lines on the x-axis
              },
            },
            y: {
              stacked: true,
            },
          },
        },
      },
    );

    const loginTriggeredPoliciesChart = new Chart(
      document.getElementById('loginTriggeredPoliciesChart').getContext('2d'),
      {
        type: 'pie', // Type of chart
        data: {
          labels: ['Red', 'Blue', 'Yellow'], // Labels for the segments
          datasets: [
            {
              label: 'My First Dataset',
              data: [200, 100, 50, 30, 20, 15], // Data points for each segment
              backgroundColor: [
                '#f97316',
                '#f97316',
                '#ef4444',
                '#ef4444',
                '#ef4444',
              ],
            },
          ],
        },
        options: {
          plugins: {
            tooltip: {
              enabled: false,
            },
            legend: {
              display: false, // This will hide the legend
            },
          },
        },
      },
    );

    const loginTriggeredSignalsChart = new Chart(
      document.getElementById('loginTriggeredSignalsChart').getContext('2d'),
      {
        type: 'pie', // Type of chart
        data: {
          labels: ['Red', 'Blue', 'Yellow'], // Labels for the segments
          datasets: [
            {
              label: 'My First Dataset',
              data: [100, 40, 40, 30, 20, 12, 10, 5], // Data points for each segment
              backgroundColor: [
                '#d1d5db',
                '#f97316',
                '#fbbf24',
                '#22c55e',
                '#14b8a6',
                '#0ea5e9',
                '#6366f1',
                '#000000',
              ],
            },
          ],
        },
        options: {
          plugins: {
            tooltip: {
              enabled: false,
            },
            legend: {
              display: false, // This will hide the legend
            },
          },
        },
      },
    );

    // Registration chart
    const registrationActivityChart = new Chart(
      document.getElementById('registrationActivityChart').getContext('2d'),
      {
        type: 'bar',
        data: {
          labels: Array.from({ length: 80 }, (_, i) => `Bar ${i + 1}`),
          datasets: [],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false, // This will hide the legend
            },
            tooltip: {
              xAlign: 'center',
              yAlign: 'bottom',
              displayColors: false,
              backgroundColor: 'black', // Set background color
              titleColor: '#fff', // Set title font color
              bodyColor: '#fff', // Set body font color,
              bodyFont: {
                size: 11,
              },
              callbacks: {
                label: function (context) {
                  return context.parsed.y + ' ' + 'Activity';
                },
                title: function (tooltipItems) {
                  // Customize the tooltip title
                  if (tooltipItems.length > 0) {
                    var firstItem = tooltipItems[0];
                    return firstItem.label;
                  }
                  return '';
                },
              },
            },
          },
          scales: {
            x: {
              stacked: true,
              grid: {
                display: false, // Display grid lines on the x-axis
              },
            },
            y: {
              stacked: true,
            },
          },
        },
      },
    );

    const registrationActionChart = new Chart(
      document.getElementById('registrationActionChart').getContext('2d'),
      {
        type: 'bar',
        data: {
          labels: Array.from({ length: 80 }, (_, i) => `Bar ${i + 1}`),
          datasets: [],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false, // This will hide the legend
            },
            tooltip: {
              xAlign: 'center',
              yAlign: 'bottom',
              displayColors: false,
              backgroundColor: 'black', // Set background color
              titleColor: '#fff', // Set title font color
              bodyColor: '#fff', // Set body font color,
              bodyFont: {
                size: 11,
              },
              callbacks: {
                label: function (context) {
                  return context.parsed.y + ' ' + 'Activity';
                },
                title: function (tooltipItems) {
                  // Customize the tooltip title
                  if (tooltipItems.length > 0) {
                    var firstItem = tooltipItems[0];
                    return firstItem.label;
                  }
                  return '';
                },
              },
            },
          },
          scales: {
            x: {
              stacked: true,
              grid: {
                display: false, // Display grid lines on the x-axis
              },
            },
            y: {
              stacked: true,
            },
          },
        },
      },
    );
  });
</script>
